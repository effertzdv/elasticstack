input {

	udp {
                port => 5142
		type => "unifi"
	}


	syslog {
                port => 5141
		type => "vsphere"
	}

	syslog {
                port => 5140
		type => "sonicwall"
	}

	beats {
	      port => 5044
	      type => "squid"
	}

	beats {
	      port => 5560
	      type => "unifiserver"
	}


}

## Add your filters / logstash plugins configuration here
filter {

# --------------------------- SQUID  ------------------------------------

    if [type] == "squid" {
	grok {
	  match => { "message" => "%{NUMBER:timestamp}\s+%{NUMBER:response_time} %{IPORHOST:src_ip} %{NOTSPACE:squid_request_status}/%{NUMBER:http_status_code} %{NUMBER:transfer_size} %{NOTSPACE:http_method} (%{URIPROTO:url_scheme}://)?(?<url_host>\S+?)(:%{INT:url_port})?(/%{NOTSPACE:url_path})?\s+%{NOTSPACE:client_identity}\s+%{NOTSPACE:peer_code}/%{NOTSPACE:peerhost}\s+%{NOTSPACE:content_type}" }
	}

       mutate {
        convert => [
            # list of integer fields
            "http_status_code", "integer",
            "transfer_size", "integer",
            "url_port", "integer",
	          "response_time","integer"
         ]
       } # mutate
   }

# --------------------------- UNIFI SYSLOG ---------------------------------

  if [type] == "unifi" {

    grok {
      patterns_dir => ["/usr/share/logstash/patterns" ]

      match => {
        "message" => [
	"%{SYSLOG5424PRI}%{SYSLOGTIMESTAMP:syslog_timestamp}%{UNIFI_DEV_TYPE} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{WORD:unifi_interface}: STA %{MAC:unifi_sta_mac} %{UNIFI_EVENT_TYPE:unifi_sta_event_type}: %{GREEDYDATA:unifi_sta_event}",
        "%{SYSLOG5424PRI}%{SYSLOGTIMESTAMP:syslog_timestamp}%{UNIFI_DEV_TYPE} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{WORD:unifi_interface}: %{UNIFI_EVENT_TYPE:unifi_sta_event_type} %{GREEDYDATA:unifi_sta_event}",
        "%{SYSLOG5424PRI}%{SYSLOGTIMESTAMP:syslog_timestamp}%{UNIFI_DEV_TYPE} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{WORD:unifi_interface}: STA %{MAC:unifi_sta_mac} %{GREEDYDATA:syslog_message}\n?",
	"%{SYSLOG5424PRI}%{SYSLOGTIMESTAMP:syslog_timestamp}%{UNIFI_DEV_TYPE} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{UNIFI_CUSTOM_EVENT}\n?",
	"%{SYSLOG5424PRI}%{SYSLOGTIMESTAMP:syslog_timestamp}%{UNIFI_DEV_TYPE} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}\n?"
      ] }
      add_field => [ "@received_at", "%{@timestamp}" ]
      add_field => [ "received_from", "%{host}" ]
    }

    syslog_pri { }

    date {
      match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
      timezone => "Europe/Berlin"
    }

    mutate {
      uppercase => [ "unifi_ap_mac", "unifi_sta_mac" ]
    }  
   }

# --------------------------- UNIFI-SERVER LOG ---------------------------------

  if [type] == "unifiserver" {
      grok {
	      match => { "message" => '%{TIME:time}] <%{WORD}-%{WORD}> %{WORD:LEVEL} %{SPACE} %{DATA} - from \[%{DATA:CLIENTMAC}\]\(%{GREEDYDATA:MSG}\): state=%{WORD:state}' }
	   }
   }

# --------------------------- SONICWALL ------------------------------------

   if [type] == "sonicwall" {
   grok {
            match => { "message" => "<%{NUMBER:snw_extendedid}>%{GREEDYDATA:snw_message}" }
            add_field => { "hideme" => "no" }
            remove_field => [ "priority" , "severity" , "severity_label" , "snw_extendedid", "facility", "facility_label" ]
			           }

     kv {
     	source       => "snw_message"
	    prefix       => "snw_"
	    exclude_keys => [ "c", "m", "n", "sid", "appid", "appcat", "catid", "cdur", "arg", "Category" ,"id","msg", "pri" , "spkt", "rpkt", "app", "appname" ,"op" , "code" ]
     }

     grok {
         match => { "snw_src" => "%{IP:snw_srcip}:%{DATA:snw_srcport}:%{WORD:snw_srcif}(:%{WORD:snw_srcobjname})?" }
         remove_field => [ "snw_src" ]
     }

     grok {
        match => { "snw_dst" => "%{IP:snw_dstip}:%{DATA:snw_dstport}:%{WORD:snw_dstif}(:%{WORD:snw_dstobjname})?" }
	remove_field => [ "snw_dst" ]
     }

     
    # this is to filter some snmp traffic from telegraf overfloating the logs
     if [snw_proto] == "udp/161" or [snw_srcip] == "192.168.1.1" or [snw_srcip] == "192.168.1.2" {
             mutate {
                   replace => { "hideme" => "yes" }
            } # mutate
     }

     grok {
     	  match => { "snw_usr" => "(%{WORD}\\)?%{WORD:client_identity}" }    
     }
     grok {
     	  match => { "snw_proto" => "%{WORD:snw_protocol}/%{WORD:snw_service}" }
     }

     if [snw_rcvd] {
     	mutate {
    	   convert => [  "snw_rcvd", "integer"  ]
        }
     }
    
     if [snw_dstname] {
          mutate {
	  	 copy => { "snw_dstip" => "peerhost" } # Ziel
		  copy => { "snw_srcip" => "src_ip" }
		  copy => { "snw_rcvd" => "transfer_size" } # Bytes
		  copy => { "snw_dstname" => "url_host" } # URL
		  copy => { "snw_sn" => "host" } # Proxy Server
                
		  add_field => { "http_status_code" => "200" }
		  add_field => { "snw_to_proxy" => "yes" }
	    } # mutate
      }																		       
   }

}

output {
       if [type] == "squid" {
  	  elasticsearch {
		hosts => "elasticsearch:9200"
		index => "squid-%{+YYYY.MM.dd}"
		template_name => "logstash"
}
       }

       if [type] == "sonicwall"  and [hideme] == "no" {
  	  elasticsearch {
		hosts => "elasticsearch:9200"
		index => "sonicwall-%{+YYYY.MM.dd}"
		template_name => "logstash"
		
	  }
       }

       if [type] == "vsphere"  and [severity] <= 5 {
  	  elasticsearch {
		hosts => "elasticsearch:9200"
		index => "vmware-%{+YYYY.MM.dd}"
		template_name => "logstash"
		
	  }
       }

        if [type] == "unifi"  {
	     elasticsearch {
                  hosts => "elasticsearch:9200"
	     	  index => "unifi-%{+YYYY.MM.dd}"
   	          template_name => "logstash"
            }	
	}

        if [type] == "unifiserver"  {
	     elasticsearch {
                  hosts => "elasticsearch:9200"
	     	  index => "unifiserver-%{+YYYY.MM.dd}"
   	          template_name => "logstash"
            }
	}


      #stdout { codec => rubydebug }
}
